---
// Header component with responsive navigation
---

<header class="bg-[var(--color-background)] border-b border-[var(--color-surface)]">
  <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo/Brand -->
      <div class="flex-shrink-0">
        <a href="/" class="text-[var(--color-text-primary)] text-xl font-bold hover:text-[var(--color-text-secondary)] transition-colors">
          Ultimate Question Coding
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="ml-10 flex items-baseline space-x-4">
          <a href="/projects" class="text-[var(--color-text-primary)] hover:text-[var(--color-text-secondary)] px-3 py-2 rounded-md text-sm font-medium transition-colors">
            Projects
          </a>
          <a href="/contact" class="text-[var(--color-text-primary)] hover:text-[var(--color-text-secondary)] px-3 py-2 rounded-md text-sm font-medium transition-colors">
            Contact
          </a>
        </div>
      </div>

      <!-- Mobile menu button -->
      <div class="md:hidden">
        <button 
          type="button" 
          class="mobile-menu-button text-[var(--color-text-primary)] hover:text-[var(--color-text-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-accent)] focus:ring-offset-2 focus:ring-offset-[var(--color-background)] p-2"
          aria-controls="mobile-menu"
          aria-expanded="false"
        >
          <span class="sr-only">Open main menu</span>
          <!-- Hamburger icon -->
          <svg class="block h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <!-- Close icon (hidden by default) -->
          <svg class="hidden h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation Menu -->
    <div class="md:hidden mobile-menu hidden" id="mobile-menu">
      <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 border-t border-[var(--color-surface)]">
        <a href="/projects" class="text-[var(--color-text-primary)] hover:text-[var(--color-text-secondary)] block px-3 py-2 rounded-md text-base font-medium transition-colors">
          Projects
        </a>
        <a href="/contact" class="text-[var(--color-text-primary)] hover:text-[var(--color-text-secondary)] block px-3 py-2 rounded-md text-base font-medium transition-colors">
          Contact
        </a>
      </div>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle functionality
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    const hamburgerIcon = mobileMenuButton?.querySelector('svg:first-child');
    const closeIcon = mobileMenuButton?.querySelector('svg:last-child');

    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', function() {
        const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
        
        // Toggle menu visibility
        mobileMenu.classList.toggle('hidden');
        
        // Toggle aria-expanded
        mobileMenuButton.setAttribute('aria-expanded', !isExpanded ? 'true' : 'false');
        
        // Toggle icons
        if (hamburgerIcon && closeIcon) {
          hamburgerIcon.classList.toggle('hidden');
          closeIcon.classList.toggle('hidden');
        }
      });

      // Close menu when clicking outside
      document.addEventListener('click', function(event) {
        if (!mobileMenuButton?.contains(event.target as Node) && !mobileMenu?.contains(event.target as Node)) {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          if (hamburgerIcon && closeIcon) {
            hamburgerIcon.classList.remove('hidden');
            closeIcon.classList.add('hidden');
          }
        }
      });

      // Close menu on window resize to desktop size
      window.addEventListener('resize', function() {
        if (window.innerWidth >= 768) { // md breakpoint
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
          if (hamburgerIcon && closeIcon) {
            hamburgerIcon.classList.remove('hidden');
            closeIcon.classList.add('hidden');
          }
        }
      });
    }
  });
</script>
